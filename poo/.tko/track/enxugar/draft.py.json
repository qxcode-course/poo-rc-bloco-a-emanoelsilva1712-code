{
    "patches": [
        {
            "label": "2025-09-23_14-17-00",
            "content": "@@ -1,1497 +0,0 @@\n-class Towel:%0A    def __init__(self, color: str, size: str): # construtor%0A        self.color: str = color # atributos%0A        self.size: str = size%0A        self.wetness: int = 0%0A    %0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.isMaxWetness():%0A            self.wetness = self.isMaxWetness()%0A            print(%22toalha saturada, ensopada, pingando%22)%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A    def isMaxWetness(self) -%3E int:%0A        if self.size == %22P%22: # early return%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0 # default return%0A%0A    def __str__(self) -%3E str: # toString%0A        return f%22Color:%7Bself.color%7D, Size:%7Bself.size%7D, Wet:%7Bself.wetness%7D%22%0A%0Adef main(): %0A    towel: Towel = Towel(%22%22, %22%22) # 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito%0A%0A        line: str = input() # 4: perguntar ao usuario%0A        args: list%5Bstr%5D = line.split(%22 %22) # 5: separar argumentos%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22new%22: # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)%0A        elif args%5B0%5D == %22dry%22:%0A            amount: int = int(args%5B1%5D)%0A            towel.dry(amount)%0A        elif args%5B0%5D == %22show%22:%0A            print(towel)%0A        else: # 7: erro%0A            print(%22fail: comando n%C3%A3o encontrado%22)%0A%0Amain() # passo 1%0A\n",
            "lines": "0"
        },
        {
            "label": "2025-09-23_14-17-52",
            "content": "@@ -747,16 +747,18 @@\n urn f%22Co\n+lo\n r:%7Bself.\n@@ -770,17 +770,16 @@\n %7D, Size:\n- \n %7Bself.si\n@@ -787,17 +787,16 @@\n e%7D, Wet:\n- \n %7Bself.we\n@@ -983,35 +983,8 @@\n rio%0A\n-        print (%22$%22 + line)%0A\n     \n@@ -1118,21 +1118,19 @@\n %5B0%5D == %22\n-criar\n+new\n %22: # col\n",
            "lines": "49"
        },
        {
            "label": "2025-09-23_14-24-46",
            "content": "@@ -1399,15 +1399,12 @@\n == %22\n-mostrar\n+show\n %22:%0A \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-25-49",
            "content": "@@ -767,15 +767,12 @@\n r%7D, \n-Tamanho\n+Size\n : %7Bs\n@@ -786,15 +786,11 @@\n e%7D, \n-Umidade\n+Wet\n : %7Bs\n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-27-06",
            "content": "@@ -749,17 +749,16 @@\n n f%22Cor:\n- \n %7Bself.co\n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-27-27",
            "content": "@@ -1307,12 +1307,11 @@\n == %22\n-seca\n+dry\n %22:%0A \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-28-28",
            "content": "@@ -357,20 +357,52 @@\n     \n-return %22sim%22\n+print(%22toalha saturada, ensopada, pingando%22)\n %0A%0A  \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-35-31",
            "content": "@@ -349,59 +349,28 @@\n     \n-def isDry (self):%0A        return self.wetness == 0 \n+        return %22sim%22\n %0A%0A  \n@@ -1275,15 +1275,15 @@\n == %22\n-dry\n+seca\n %22:%0A\n-%0A\n     \n@@ -1350,146 +1350,8 @@\n unt)\n-%0A%0A        elif args%5B0%5D == %22seca%22:%0A            if(towel.isDry):%0A                print(%22sim%22)%0A            else:%0A                print(%22n%C3%A3o%22)\n %0A   \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-44-43",
            "content": "@@ -1306,15 +1306,11 @@\n == %22\n-enxugar\n+dry\n %22:%0A%0A\n",
            "lines": "58"
        },
        {
            "label": "2025-09-23_14-45-43",
            "content": "@@ -1441,18 +1441,16 @@\n el.isDry\n-()\n ):%0A     \n",
            "lines": "58"
        },
        {
            "label": "2025-09-23_14-48-06",
            "content": "@@ -1517,17 +1517,17 @@\n print(%22n\n-a\n+%C3%A3\n o%22)%0A    \n",
            "lines": "58"
        },
        {
            "label": "2025-09-23_14-48-22",
            "content": "@@ -344,48 +344,8 @@\n ss()\n- %0A            print(%22toalha encharcada%22)\n %0A   \n",
            "lines": "58"
        },
        {
            "label": "2025-09-23_14-49-40",
            "content": "@@ -1665,23 +1665,44 @@\n  print(%22\n-mostrar\n+fail: comando n%C3%A3o encontrado\n %22)%0A%0Amain\n",
            "lines": "59"
        },
        {
            "label": "2025-10-05_23-46-32",
            "content": "@@ -1615,25 +1615,21 @@\n   print(\n-%22mostrar%22\n+towel\n )%0A      \n",
            "lines": "59"
        },
        {
            "label": "2025-10-05_23-48-11",
            "content": "@@ -1615,21 +1615,25 @@\n   print(\n-towel\n+%22mostrar%22\n )%0A      \n",
            "lines": "59"
        },
        {
            "label": "2025-10-05_23-48-53",
            "content": "@@ -18,14 +18,16 @@\n def \n+_\n _init_\n+_\n (sel\n@@ -340,16 +340,17 @@\n etness()\n+ \n %0A       \n@@ -380,16 +380,72 @@\n arcada%22)\n+%0A    def isDry (self):%0A        return self.wetness == 0 \n %0A%0A    de\n@@ -725,25 +725,16 @@\n  return%0A\n-    %0A    \n %0A    def\n@@ -738,13 +738,15 @@\n def \n+_\n _str_\n+_\n (sel\n@@ -854,137 +854,8 @@\n s%7D%22%0A\n-    %0A    def isDry(self):%0A        if self.wetness == 0 :%0A            return True%0A        else :%0A            return False%0A        \n %0Adef\n@@ -1039,16 +1039,17 @@\n    print\n+ \n (%22$%22 + l\n@@ -1071,16 +1071,21 @@\n gs: list\n+%5Bstr%5D\n  = line.\n@@ -1090,16 +1090,19 @@\n e.split(\n+%22 %22\n ) # 5: s\n@@ -1167,25 +1167,16 @@\n   break%0A\n-        %0A\n         \n@@ -1321,251 +1321,8 @@\n ze)%0A\n-        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A            %0A        elif args%5B0%5D == %22seca%22:%0A            print(%22sim%22 if towel.isDry() else %22nao%22)%0A            %0A        elif args%5B0%5D == %22torcer%22:%0A            towel.wringOut()%0A        %0A\n     \n@@ -1352,16 +1352,17 @@\n xugar%22:%0A\n+%0A\n         \n@@ -1422,24 +1422,25 @@\n amount)%0A\n+%0A\n         \n %0A       \n@@ -1435,33 +1435,111 @@\n     \n-%0A        else: # 7: erro%0A\n+elif args%5B0%5D == %22seca%22:%0A            if(towel.isDry()):%0A                print(%22sim%22)%0A            else:%0A \n     \n@@ -1550,43 +1550,134 @@\n     \n+   \n print(%22\n-fail: comando n%C3%A3o encontrado\n+nao%22)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A        else: # 7: erro%0A            print(%22mostrar\n %22)%0A%0A\n@@ -1692,8 +1692,9 @@\n  passo 1\n+%0A\n",
            "lines": "59"
        },
        {
            "label": "2025-10-05_23-55-58",
            "content": "@@ -18,16 +18,14 @@\n def \n-_\n _init_\n-_\n (sel\n@@ -338,17 +338,16 @@\n etness()\n- \n %0A       \n@@ -381,77 +381,8 @@\n da%22)\n-%0A            %0A    def isDry (self):%0A        return self.wetness == 0 \n %0A%0A  \n@@ -666,16 +666,25 @@\n  return%0A\n+    %0A    \n %0A    def\n@@ -688,15 +688,13 @@\n def \n-_\n _str_\n-_\n (sel\n@@ -798,16 +798,145 @@\n tness%7D%22%0A\n+    %0A    def isDry(self):%0A        if self.wetness == 0 :%0A            return True%0A        else :%0A            return False%0A        \n %0Adef mai\n@@ -1116,17 +1116,16 @@\n    print\n- \n (%22$%22 + l\n@@ -1151,13 +1151,8 @@\n list\n-%5Bstr%5D\n  = l\n@@ -1165,11 +1165,8 @@\n lit(\n-%22 %22\n ) # \n@@ -1235,16 +1235,25 @@\n   break%0A\n+        %0A\n         \n@@ -1394,16 +1394,259 @@\n , size)%0A\n+        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A            %0A        elif args%5B0%5D == %22seca%22:%0A            print(%22sim%22 if towel.isDry() else %22nao%22)%0A            %0A        elif args%5B0%5D == %22torcer%22:%0A            towel.wringOut()%0A        %0A\n         \n@@ -1672,17 +1672,16 @@\n xugar%22:%0A\n-%0A\n         \n@@ -1741,25 +1741,24 @@\n amount)%0A\n-%0A\n         \n elif arg\n@@ -1753,199 +1753,8 @@\n     \n-elif args%5B0%5D == %22seca%22:%0A            if(towel.isDry()):%0A                print(%22sim%22)%0A            else:%0A                print(%22nao%22)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A\n %0A   \n@@ -1841,9 +1841,8 @@\n  passo 1\n-%0A\n",
            "lines": "66"
        },
        {
            "label": "2025-10-05_23-59-42",
            "content": "@@ -18,14 +18,16 @@\n def \n+_\n _init_\n+_\n (sel\n@@ -340,16 +340,17 @@\n etness()\n+ \n %0A       \n@@ -380,16 +380,85 @@\n arcada%22)\n+%0A            %0A    def isDry (self):%0A        return self.wetness == 0 \n %0A%0A    de\n@@ -738,25 +738,16 @@\n  return%0A\n-    %0A    \n %0A    def\n@@ -751,13 +751,15 @@\n def \n+_\n _str_\n+_\n (sel\n@@ -867,137 +867,8 @@\n s%7D%22%0A\n-    %0A    def isDry(self):%0A        if self.wetness == 0 :%0A            return True%0A        else :%0A            return False%0A        \n %0Adef\n@@ -1052,16 +1052,17 @@\n    print\n+ \n (%22$%22 + l\n@@ -1084,16 +1084,21 @@\n gs: list\n+%5Bstr%5D\n  = line.\n@@ -1103,16 +1103,19 @@\n e.split(\n+%22 %22\n ) # 5: s\n@@ -1180,25 +1180,16 @@\n   break%0A\n-        %0A\n         \n@@ -1334,251 +1334,8 @@\n ze)%0A\n-        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A            %0A        elif args%5B0%5D == %22seca%22:%0A            print(%22sim%22 if towel.isDry() else %22nao%22)%0A            %0A        elif args%5B0%5D == %22torcer%22:%0A            towel.wringOut()%0A        %0A\n     \n@@ -1365,16 +1365,17 @@\n xugar%22:%0A\n+%0A\n         \n@@ -1435,24 +1435,25 @@\n amount)%0A\n+%0A\n         \n %0A       \n@@ -1440,24 +1440,215 @@\n t)%0A%0A        \n+elif args%5B0%5D == %22seca%22:%0A            if(towel.isDry()):%0A                print(%22sim%22)%0A            else:%0A                print(%22nao%22)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A\n %0A        els\n@@ -1727,8 +1727,9 @@\n  passo 1\n+%0A\n",
            "lines": "61"
        },
        {
            "label": "2025-10-06_00-02-37",
            "content": "@@ -18,16 +18,14 @@\n def \n-_\n _init_\n-_\n (sel\n@@ -338,17 +338,16 @@\n etness()\n- \n %0A       \n@@ -381,64 +381,8 @@\n da%22)\n-%0A    def isDry (self):%0A        return self.wetness == 0 \n %0A%0A  \n@@ -666,16 +666,25 @@\n  return%0A\n+    %0A    \n %0A    def\n@@ -688,15 +688,13 @@\n def \n-_\n _str_\n-_\n (sel\n@@ -798,16 +798,145 @@\n tness%7D%22%0A\n+    %0A    def isDry(self):%0A        if self.wetness == 0 :%0A            return True%0A        else :%0A            return False%0A        \n %0Adef mai\n@@ -1116,17 +1116,16 @@\n    print\n- \n (%22$%22 + l\n@@ -1151,13 +1151,8 @@\n list\n-%5Bstr%5D\n  = l\n@@ -1165,11 +1165,8 @@\n lit(\n-%22 %22\n ) # \n@@ -1235,16 +1235,25 @@\n   break%0A\n+        %0A\n         \n@@ -1394,16 +1394,259 @@\n , size)%0A\n+        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A            %0A        elif args%5B0%5D == %22seca%22:%0A            print(%22sim%22 if towel.isDry() else %22nao%22)%0A            %0A        elif args%5B0%5D == %22torcer%22:%0A            towel.wringOut()%0A        %0A\n         \n@@ -1672,17 +1672,16 @@\n xugar%22:%0A\n-%0A\n         \n@@ -1745,212 +1745,8 @@\n nt)%0A\n-%0A        elif args%5B0%5D == %22seca%22:%0A            if(towel.isDry()):%0A                print(%22sim%22)%0A            else:%0A                print(%22nao%22)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A    \n     \n@@ -1841,9 +1841,8 @@\n  passo 1\n-%0A\n",
            "lines": "66"
        },
        {
            "label": "2025-10-06_00-02-56",
            "content": "@@ -1171,17 +1171,8 @@\n eak%0A\n-        %0A\n     \n@@ -1209,24 +1209,24 @@\n  color size%0A\n+\n             \n@@ -1317,17 +1317,16 @@\n , size)%0A\n-%0A\n         \n@@ -1348,24 +1348,25 @@\n  %22enxugar%22:%0A\n+%0A\n             \n@@ -1562,17 +1562,16 @@\n (%22nao%22)%0A\n-%0A\n         \n@@ -1597,16 +1597,16 @@\n strar%22:%0A\n-\n         \n@@ -1622,16 +1622,29 @@\n (towel)%0A\n+            %0A\n         \n",
            "lines": "60"
        },
        {
            "label": "2025-10-06_00-03-37",
            "content": "@@ -1167,16 +1167,24 @@\n   break%0A\n+        \n %0A       \n@@ -1675,16 +1675,44 @@\n  print(%22\n+fail: comando n%C3%A3o encontrado\n %22)%0A%0Amain\n",
            "lines": "61"
        },
        {
            "label": "2025-10-06_00-08-24",
            "content": "@@ -1167,24 +1167,16 @@\n   break%0A\n-        \n %0A       \n@@ -1671,36 +1671,8 @@\n nt(%22\n-fail: comando n%C3%A3o encontrado\n %22)%0A%0A\n",
            "lines": "61"
        },
        {
            "label": "2025-10-06_00-08-35",
            "content": "@@ -340,16 +340,17 @@\n etness()\n+ \n %0A       \n@@ -381,17 +381,16 @@\n rcada%22)%0A\n-%0A\n     def \n@@ -394,16 +394,17 @@\n ef isDry\n+ \n (self):%0A\n@@ -435,16 +435,17 @@\n ess == 0\n+ \n %0A%0A    de\n@@ -1039,16 +1039,17 @@\n    print\n+ \n (%22$%22 + l\n@@ -1056,15 +1056,8 @@\n ine)\n- # echo\n %0A   \n@@ -1167,16 +1167,25 @@\n   break%0A\n+        %0A\n         \n@@ -1326,16 +1326,17 @@\n , size)%0A\n+%0A\n         \n@@ -1356,12 +1356,15 @@\n == %22\n-seca\n+enxugar\n %22:%0A \n@@ -1378,49 +1378,66 @@\n     \n-print(%22sim%22 if towel.isDry() else %22nao%22\n+amount: int = int(args%5B1%5D)%0A            towel.dry(amount\n )%0A\n+%0A\n     \n@@ -1461,14 +1461,12 @@\n == %22\n-torcer\n+seca\n %22:%0A \n@@ -1480,128 +1480,103 @@\n     \n+if(\n towel.\n-wringOut()%0A        elif args%5B0%5D == %22enxugar%22:%0A            amount: int = int(args%5B1%5D)%0A            towel.dry(amount)\n+isDry()):%0A                print(%22sim%22)%0A            else:%0A                print(%22nao%22)%0A\n %0A   \n@@ -1723,8 +1723,9 @@\n  passo 1\n+%0A\n",
            "lines": "61"
        },
        {
            "label": "2025-10-06_00-11-09",
            "content": "class Towel:\n    def __init__(self, color: str, size: str): # construtor\n        self.color: str = color # atributos\n        self.size: str = size\n        self.wetness: int = 0\n    \n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha encharcada\")\n\n    def isDry(self):\n        return self.wetness == 0\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\": # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0 # default return\n\n    def __str__(self) -> str: # toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\ndef main(): \n    towel: Towel = Towel(\"\", \"\") # 2: criar um obj com qq valor inicial\n    while True: # 3: loop infinito\n\n        line: str = input() # 4: perguntar ao usuario\n        print(\"$\" + line) # echo\n        args: list[str] = line.split(\" \") # 5: separar argumentos\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\": # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\")\n        elif args[0] == \"torcer\":\n            towel.wringOut()\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"mostrar\":\n            print(towel)\n        else: # 7: erro\n            print(\"fail: comando n\u00e3o encontrado\")\n\nmain() # passo 1",
            "lines": "57"
        }
    ]
}