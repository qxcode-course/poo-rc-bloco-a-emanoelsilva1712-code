{
    "patches": [
        {
            "label": "2025-09-23_14-17-00",
            "content": "@@ -1,1497 +0,0 @@\n-class Towel:%0A    def __init__(self, color: str, size: str): # construtor%0A        self.color: str = color # atributos%0A        self.size: str = size%0A        self.wetness: int = 0%0A    %0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.isMaxWetness():%0A            self.wetness = self.isMaxWetness()%0A            print(%22toalha saturada, ensopada, pingando%22)%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A    def isMaxWetness(self) -%3E int:%0A        if self.size == %22P%22: # early return%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0 # default return%0A%0A    def __str__(self) -%3E str: # toString%0A        return f%22Color:%7Bself.color%7D, Size:%7Bself.size%7D, Wet:%7Bself.wetness%7D%22%0A%0Adef main(): %0A    towel: Towel = Towel(%22%22, %22%22) # 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito%0A%0A        line: str = input() # 4: perguntar ao usuario%0A        args: list%5Bstr%5D = line.split(%22 %22) # 5: separar argumentos%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22new%22: # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)%0A        elif args%5B0%5D == %22dry%22:%0A            amount: int = int(args%5B1%5D)%0A            towel.dry(amount)%0A        elif args%5B0%5D == %22show%22:%0A            print(towel)%0A        else: # 7: erro%0A            print(%22fail: comando n%C3%A3o encontrado%22)%0A%0Amain() # passo 1%0A\n",
            "lines": "0"
        },
        {
            "label": "2025-09-23_14-17-52",
            "content": "@@ -747,16 +747,18 @@\n urn f%22Co\n+lo\n r:%7Bself.\n@@ -770,17 +770,16 @@\n %7D, Size:\n- \n %7Bself.si\n@@ -787,17 +787,16 @@\n e%7D, Wet:\n- \n %7Bself.we\n@@ -983,35 +983,8 @@\n rio%0A\n-        print (%22$%22 + line)%0A\n     \n@@ -1118,21 +1118,19 @@\n %5B0%5D == %22\n-criar\n+new\n %22: # col\n",
            "lines": "49"
        },
        {
            "label": "2025-09-23_14-24-46",
            "content": "@@ -1399,15 +1399,12 @@\n == %22\n-mostrar\n+show\n %22:%0A \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-25-49",
            "content": "@@ -767,15 +767,12 @@\n r%7D, \n-Tamanho\n+Size\n : %7Bs\n@@ -786,15 +786,11 @@\n e%7D, \n-Umidade\n+Wet\n : %7Bs\n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-27-06",
            "content": "@@ -749,17 +749,16 @@\n n f%22Cor:\n- \n %7Bself.co\n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-27-27",
            "content": "@@ -1307,12 +1307,11 @@\n == %22\n-seca\n+dry\n %22:%0A \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-28-28",
            "content": "@@ -357,20 +357,52 @@\n     \n-return %22sim%22\n+print(%22toalha saturada, ensopada, pingando%22)\n %0A%0A  \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-35-31",
            "content": "@@ -349,59 +349,28 @@\n     \n-def isDry (self):%0A        return self.wetness == 0 \n+        return %22sim%22\n %0A%0A  \n@@ -1275,15 +1275,15 @@\n == %22\n-dry\n+seca\n %22:%0A\n-%0A\n     \n@@ -1350,146 +1350,8 @@\n unt)\n-%0A%0A        elif args%5B0%5D == %22seca%22:%0A            if(towel.isDry):%0A                print(%22sim%22)%0A            else:%0A                print(%22n%C3%A3o%22)\n %0A   \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_14-44-43",
            "content": "@@ -1306,15 +1306,11 @@\n == %22\n-enxugar\n+dry\n %22:%0A%0A\n",
            "lines": "58"
        },
        {
            "label": "2025-09-23_14-45-43",
            "content": "@@ -1441,18 +1441,16 @@\n el.isDry\n-()\n ):%0A     \n",
            "lines": "58"
        },
        {
            "label": "2025-09-23_14-48-06",
            "content": "@@ -1517,17 +1517,17 @@\n print(%22n\n-a\n+%C3%A3\n o%22)%0A    \n",
            "lines": "58"
        },
        {
            "label": "2025-09-23_14-48-22",
            "content": "@@ -344,48 +344,8 @@\n ss()\n- %0A            print(%22toalha encharcada%22)\n %0A   \n",
            "lines": "58"
        },
        {
            "label": "2025-09-23_14-49-40",
            "content": "class Towel:\n    def __init__(self, color: str, size: str): # construtor\n        self.color: str = color # atributos\n        self.size: str = size\n        self.wetness: int = 0\n    \n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness() \n            print(\"toalha encharcada\")\n    def isDry (self):\n        return self.wetness == 0 \n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\": # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0 # default return\n\n    def __str__(self) -> str: # toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\ndef main(): \n    towel: Towel = Towel(\"\", \"\") # 2: criar um obj com qq valor inicial\n    while True: # 3: loop infinito\n\n        line: str = input() # 4: perguntar ao usuario\n        print (\"$\" + line)\n        args: list[str] = line.split(\" \") # 5: separar argumentos\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\": # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"enxugar\":\n\n            amount: int = int(args[1])\n            towel.dry(amount)\n\n        elif args[0] == \"seca\":\n            if(towel.isDry()):\n                print(\"sim\")\n            else:\n                print(\"nao\")\n        elif args[0] == \"mostrar\":\n            print(towel)\n        else: # 7: erro\n            print(\"fail: comando n\u00e3o encontrado\")\n\nmain() # passo 1\n",
            "lines": "59"
        }
    ]
}